# joe playbooks/ghost.yml
# ansible-playbook -i variables/hosts.yaml -e 'ansible_ssh_user=ansible' --private-key ~/.ssh/orchestration-iaas-no.pem playbooks/ghost.yml

# https://code-maven.com/install-and-configure-nginx-using-ansible
---
- hosts: "{{active_hosts_groups}}"
  vars:
    loaded_vars:
      a_placeholder:
    loaded_vars_dict:
      a_placeholder:
  vars_files:
    - ../variables/ghost-list.json
  remote_user: orchestrator
  # https://stackoverflow.com/questions/27444204/run-ansible-playbook-with-sudo
  become: yes
  become_method: sudo
  gather_facts: false

  tasks:

  - import_tasks: "include/_debug_active_hosts.yml"
    tags: [debug]

  - import_tasks: "include/_load_host_speciffic_data.yml"
    tags: [always]

  # # -----------------------------------
  # # Install Ghost
  # # -----------------------------------

  - name: Set ghost folders
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/file_module.html
    file:
      path: '/var/www/{{item.folder}}/{{item.language}}'
      state: 'directory'
      owner: '{{item.user}}'
      group: 'developers'
      mode: 'ug=rwx,o=rx,g+s'
      recurse: yes
    tags: [install]

  - name: INSTALL ghost
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/command_module.html
    command: ghost install --no-prompt --no-setup
    args:
      chdir: "/var/www/{{item.folder}}/{{item.language}}"
    become_user: "orchestrator"
    tags: [install]

  - name: Create/update `config.production.json` file from a template
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/template_module.html#template-module
    template:
      src: ../templates/ghost-config.j2
      dest: "/var/www/{{item.folder}}/{{item.language}}/config.production.json"
      # force: no
    tags: [install, update]

  - name: Create ghost `content` folder
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/file_module.html
    file:
      path: '/var/www/{{item.folder}}/{{item.language}}/content'
      state: 'directory'
      owner: '{{item.user}}'
      group: '{{item.user}}'
      mode: 'ug=rwx,o=rx,g+s'
      recurse: yes
    tags: [install]

  - name: Create ghost root file
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/file_module.html
    file:
      path: '/var/www/{{item.folder}}/{{item.language}}/config.production.json'
      state: 'file'
      owner: '{{item.user}}'
      group: '{{item.user}}'
      mode: 'ug=rwx,o=,g+s' # not readable for others
      recurse: no
    tags: [install]

  - name: CONFIGure the ghost (with ghost CLI command)`
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/command_module.html
    # ghost config --url https://boradugic.colabo.space/sr-cyr --pname ghost-boradugic-sr-cyr --port 25006 --dbname ghost_boradugic_sr_cyr
    command: "ghost config --url http://{{ item.host }}/{{ item.language }} --pname {{ item.key }} --port {{ item.port }} --dbname {{ item.database.db }}"
    args:
      chdir: "/var/www/{{item.folder}}/{{item.language}}"
    become_user: "{{item.user}}"
    tags: [install, update]

  - name: report variables
    debug:
      msg: "inventory_hostname: {{inventory_hostname}}, ansible_hostname: ansible_hostname}}"
    tags: [always]

  # -----------------------------------------------------
  # Loading and extending `<ghost_folder>/.ghost-cli` files
  # -----------------------------------------------------

  # edit /var/www/ghost-colabo/en/.ghost-cli
  # THIS IS NOT USED, JUST AN ALTERNATIVE FOR FETCH
  # - name: load .ghost-cli from the remote host into local variable
  #   with_items: "{{ items_array }}"
  #   slurp:
  #     src: "/var/www/{{item.folder}}/{{item.language}}/.ghost-cli"
  #   register: loaded_vars[{{item.key}}][{{item.language}}]

  # edit /var/www/ghost-colabo/en/.ghost-cli
  - name: load .ghost-cli from remote host into local file
    with_items: "{{ items_array }}"
    fetch:
      src: "/var/www/{{item.folder}}/{{item.language}}/.ghost-cli"
      dest: "/tmp/fetched"
    tags: [always]

  - name: load .ghost-cli from local file into local variable
    with_items: "{{ items_array }}"
    include_vars:
      file: "/tmp/fetched/{{inventory_hostname}}/var/www/{{item.folder}}/{{item.language}}/.ghost-cli"
      name: loaded_var
    # register: loaded_vars[item.key]
    register: loaded_vars
    tags: [always]

  - name: report loaded .ghost-cli-s
    # with_items: "{{ items_array }}"
    debug:
      msg: "{{ loaded_vars }}"
      # msg: "{{ loaded_vars[item.key] }}"
    tags: [always]

  - name: Clean loaded .ghost-cli-s
    set_fact:
      loaded_vars: "{{ loaded_vars | json_query('results[*].{value: ansible_facts.loaded_var, key: item.key}') }}"
    tags: [always]

  - name: report loaded .ghost-cli-s (composite)
    debug:
      msg: "{{ loaded_vars }}"
    tags: [always]

  - name: report loaded .ghost-cli-s (itteratively)
    with_items: "{{ loaded_vars }}"
    debug:
      msg: "{{ item }}"
    tags: [always]

  - name: convert loaded .ghost-cli-s from array to dict + extending dicts
    with_items: "{{ loaded_vars }}"
    set_fact:
      loaded_vars_dict: "{{ loaded_vars_dict
      | combine({
          item.key: item.value
          | combine({
            'name': item.key,
            'running': 'production'
          })
        })
      }}"
    tags: [always]

  - name: report loaded .ghost-cli dicts
    with_items: "{{ items_array }}"
    debug:
      msg: "for key '{{ item.key }}' value: {{ loaded_vars_dict[item.key] }}"
    tags: [always]

  - name: write loaded .ghost-cli-s as dict to remote file
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/2.6/modules/copy_module.html
    copy:
      content: "{{ loaded_vars_dict[item.key] | to_nice_json }}"
      dest: "/var/www/{{item.folder}}/{{item.language}}/.ghost-cli"
    tags: [always]

  - name: Set ghost files privileges
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/command_module.html
    command: 'find ./ ! -path "./versions/*" -type f -exec chmod 664 {} \;'
    args:
      chdir: "/var/www/{{item.folder}}/{{item.language}}"
    tags: [install, update]

  - name: Set ghost folder privileges
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/command_module.html
    command: 'find ./ -type d -exec chmod 00775 {} \;'
    args:
      chdir: "/var/www/{{item.folder}}/{{item.language}}"
    tags: [install, update]

  - name: adding the user 'orchestrator' to {{item.user}} ghost group
    with_items: "{{ items_array }}"
    # https://serverfault.com/questions/542910/adding-a-user-to-an-additional-group-using-ansible
    user:
      name: 'orchestrator'
      groups: '{{item.user}}'
      append: yes
    tags: [install]

  - name: setup ghost systemd
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/command_module.html
    command: "ghost setup linux-user systemd"
    args:
      chdir: "/var/www/{{item.folder}}/{{item.language}}"
    become_user: "{{item.user}}"
    tags: [install]

  - name: start and enable ghost
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    with_items: "{{ items_array }}"
    # https://docs.ansible.com/ansible/latest/modules/command_module.html
    command: ghost start --enable
    args:
      chdir: "/var/www/{{item.folder}}/{{item.language}}"
    become_user: "orchestrator"
    tags: [install, update]
