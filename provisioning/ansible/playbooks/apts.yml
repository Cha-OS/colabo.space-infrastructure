# joe playbooks/apts.yml
# ansible-playbook -i variables/hosts.yaml -e 'ansible_ssh_user=ansible' --private-key ~/.ssh/orchestration-iaas-no.pem --extra-vars '{"active_hosts_groups": ["services", "orchestrators"]}' playbooks/apts.yml --tags love,start,debug
---
- hosts: "{{active_hosts_groups}}"
  vars_files:
    - ../variables/apts-list.json
  remote_user: orchestrator
  # https://stackoverflow.com/questions/27444204/run-ansible-playbook-with-sudo
  become: yes
  become_method: sudo
  gather_facts: false

  tasks:

  - import_tasks: "include/_debug_active_hosts.yml"
    tags: [debug]

  - import_tasks: "include/_load_host_speciffic_data.yml"
    tags: [always]

  # -----------------------------------
  # Real apt tasks
  # -----------------------------------
  # - name: Run the equivalent of `apt-get update`
  #   # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
  #   # https://docs.ansible.com/ansible/latest/modules/apt_module.html
  #   apt:
  #     update_cache: yes
  #     cache_valid_time: 3600

  - name: Install latest versions of packages from the list
    with_items: "{{ items_array }}"
    when: "{{ item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0) }}" # check hosts matching
    # https://docs.ansible.com/ansible/latest/modules/apt_module.html
    apt:
      name: "{{ item.key }}"
      state: "{{ item.state | default('present') }}" # default is 'present'

  - name: Start services for packages that are services
    with_items: "{{ items_array }}"
    when: "{{ (item.service is defined) and (item.hosts is not defined or ((active_hosts_groups | intersect(item.hosts)) | length>0)) }}" # check hosts matching
    # https://docs.ansible.com/ansible/latest/modules/apt_module.html
    service: 
      name: "{{ item.service.name }}" 
      state: started
      enabled: true